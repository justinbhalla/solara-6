// ui.js â€” DOM rendering + interactions
import { state, COLS } from './state.js';
import { fire, initials, normalizeDateString } from './utils.js';
import { enqueueOp, scheduleContentDurable, flushContentDurable, findTask } from './oplog.v2.js';
import { sendAware, sendBlurAware, sendDelta } from './ws.v2.js';
export function renderTabs(){ const node=document.getElementById('tabs'); node.innerHTML=''; const names=Object.keys(state.tabData); names.forEach(name=>{ const b=document.createElement('button'); b.className='tab-button px-4 py-1.5 rounded-full text-sm font-medium bg-transparent border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:border-indigo-500 hover:text-indigo-600 dark:hover:text-white transition-all duration-150 truncate max-w-[160px]'; if(name===state.activeTab){ b.classList.add('border-indigo-500','text-indigo-700','dark:text-white','font-semibold','bg-indigo-50','dark:bg-indigo-600/30'); } b.dataset.tab=name; b.textContent=name; b.onclick=()=>{ switchTab(name); }; b.ondblclick=()=>{ if(state.currentRole==='viewer') return; const nn=prompt('Rename tab:',name); if(!nn||!nn.trim()||nn===name||state.tabData[nn])return; enqueueOp('rename_tab', { from:name, to:nn }); }; b.oncontextmenu=(e)=>{ e.preventDefault(); if(state.currentRole==='viewer')return; if(confirm(`Delete tab "${name}"?`)){ if(state.activeTab===name) state.activeTab=Object.keys(state.tabData).find(t=>t!==name)||null; delete state.tabData[name]; renderTabs(); renderBoard(); } }; node.appendChild(b); }); }
export function switchTab(tab){ if(!state.tabData[tab]) return; state.activeTab=tab; document.querySelectorAll('.tab-button').forEach(x=>x.classList.remove('border-indigo-500','text-indigo-700','dark:text-white','font-semibold','bg-indigo-50','dark:bg-indigo-600/30')); const btn=[...document.querySelectorAll('.tab-button')].find(b=>b.dataset.tab===tab); if(btn) btn.classList.add('border-indigo-500','text-indigo-700','dark:text-white','font-semibold','bg-indigo-50','dark:bg-indigo-600/30'); renderBoard(); }
function ensureAtLeastOne(){ const cols=state.tabData[state.activeTab]; if(!cols) return; if((cols.todo?.length||0)+(cols.inprogress?.length||0)+(cols.done?.length||0)===0){ const id=`task-${cryptoRandom()}`; const t={ id, content:'', dueDate:'', priority:'Medium', pos:1, upd:Date.now(), by: state.currentUserKey }; state.tabData[state.activeTab].todo.push(t); renderTaskIntoDOM(state.activeTab,'todo',t); } }
function cryptoRandom(){ try{ return crypto.randomUUID(); }catch{ return Math.random().toString(36).slice(2); } }
export function renderTaskIntoDOM(tab, column, t){ const colEl=document.getElementById(column); const w=createTaskElement(t.id,t.content,t.dueDate,t.priority,column,t.pos); const siblings=[...colEl.querySelectorAll('[data-task]')]; const where=siblings.find(el=>{ const id=el.id; const tt=findTask(state.tabData, id); return (tt?.pos||0) > (t.pos||0); }); if(where) colEl.insertBefore(w, where); else colEl.appendChild(w); }
export function renderBoard(){ COLS.forEach(col=>{ const colEl=document.getElementById(col); colEl.querySelectorAll('[data-task]')?.forEach(n=>n.remove()); colEl.ondragover=(e)=>{ e.preventDefault(); colEl.classList.add('drag-over','show-drop'); const after=getAfter(colEl, e.clientY); const indicator=colEl.querySelector('.drop-indicator'); if(after==null){ colEl.appendChild(indicator); } else { colEl.insertBefore(indicator, after); } dragContext.overCol = colEl.dataset.col; dragContext.insertIndex = computeInsertIndex(colEl, indicator); }; colEl.ondragleave=()=>{ colEl.classList.remove('drag-over','show-drop'); }; colEl.ondrop=(e)=>{ e.preventDefault(); colEl.classList.remove('drag-over','show-drop'); const id=dragContext.id; if(!id) return; commitReorder(id, dragContext.fromCol, colEl.dataset.col, dragContext.insertIndex); clearDrag(); }; if(!state.activeTab || !state.tabData[state.activeTab]) return; const data=state.tabData[state.activeTab]; (data[col]||[]).sort((a,b)=> (a.pos||0)-(b.pos||0)).forEach(t=> colEl.appendChild(createTaskElement(t.id,t.content,t.dueDate,t.priority,col,t.pos))); }); ensureAtLeastOne(); }
function createTaskElement(id, content='', dueDate='', priority='Medium', column, pos){ const w=document.createElement('div'); w.id=id; w.setAttribute('data-task','1'); w.draggable=state.currentRole!=='viewer'; w.className='relative p-3 rounded bg-white dark:bg-gray-700 shadow cursor-move mb-2'; w.setAttribute('data-column',column); const editable=document.createElement('div'); editable.className='editable w-full font-medium mb-1'; editable.contentEditable=(state.currentRole!=='viewer'); editable.innerText=content; const placeholder=document.createElement('span'); placeholder.className='absolute left-3 top-3 text-sm text-gray-400 pointer-events-none'; placeholder.textContent='Click to edit...'; function toggle(){ placeholder.style.display = editable.innerText.trim()===''?'block':'none'; } const row=document.createElement('div'); row.className='flex items-center gap-2'; const dateInput=document.createElement('input'); dateInput.type='date'; dateInput.value=normalizeDateString(dueDate)||''; dateInput.disabled=(state.currentRole==='viewer'); dateInput.className='mt-1 text-xs bg-transparent text-gray-700 dark:text-gray-200 border border-transparent rounded px-1 date-badge'; const prioritySelect=document.createElement('select'); prioritySelect.disabled=(state.currentRole==='viewer'); prioritySelect.className='mt-1 ml-2 text-xs bg-transparent text-gray-700 dark:text-gray-200 border border-gray-300 dark:border-gray-600 rounded px-1'; ['High','Medium','Low'].forEach(level=>{ const o=document.createElement('option'); o.value=level; o.text=level; if(level===priority) o.selected=true; prioritySelect.appendChild(o); }); const del=document.createElement('button'); del.className='absolute top-2 right-2 text-gray-400 hover:text-red-500'; del.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M6 18L18 6M6 6l12 12"/></svg>'; del.title='Delete Task'; del.onclick=()=>{ if(state.currentRole==='viewer')return; if(confirm('Delete this task?')) enqueueOp('delete_task', { task_id:id }); }; editable.addEventListener('focus', ()=>{ const sel=window.getSelection(); const pos=sel&&sel.anchorNode?sel.anchorOffset:0; sendAware(id,pos,pos); }); editable.addEventListener('keyup', ()=>{ const sel=window.getSelection(); const pos=sel&&sel.anchorNode?sel.anchorOffset:editable.innerText.length; sendAware(id,pos,pos); }); editable.addEventListener('blur', ()=>{ sendBlurAware(); flushContentDurable(id, editable.innerText.trim()); }); editable.addEventListener('input', ()=>{ const text=editable.innerText.trim(); sendDelta(id, text); scheduleContentDurable(id, text); toggle(); }); dateInput.addEventListener('change', ()=> enqueueOp('update_task_field', { task_id:id, field:'dueDate', value: normalizeDateString(dateInput.value) })); prioritySelect.addEventListener('change', ()=> enqueueOp('update_task_field', { task_id:id, field:'priority', value: prioritySelect.value||'Medium' })); w.addEventListener('dragstart',e=>{ if(state.currentRole==='viewer'){ e.preventDefault(); return; } w.classList.add('dragging'); e.dataTransfer.setData('text/plain',id); dragContext.id=id; dragContext.fromCol=w.getAttribute('data-column'); }); w.addEventListener('dragend',()=>{ w.classList.remove('dragging'); }); row.appendChild(dateInput); row.appendChild(prioritySelect); w.appendChild(editable); w.appendChild(placeholder); w.appendChild(row); w.appendChild(del); toggle(); return w; }
const dragContext = { id:null, fromCol:null, overCol:null, insertIndex:null };
function clearDrag(){ dragContext.id=null; dragContext.fromCol=null; dragContext.overCol=null; dragContext.insertIndex=null; }
function computeInsertIndex(colEl, indicator){ const siblings=[...colEl.querySelectorAll('[data-task]')]; if(siblings.length===0) return 0; const all=[...colEl.children]; let index=0; for(let i=0;i<all.length;i++){ const el=all[i]; if(el===indicator){ index=[...all.slice(0,i)].filter(n=>n.hasAttribute && n.hasAttribute('data-task')).length; return index; } } return siblings.length; }
function getAfter(container, y){ const els=[...container.querySelectorAll('[data-task]:not(.dragging)')]; return els.reduce((closest,child)=>{ const box=child.getBoundingClientRect(); const off=y-box.top-box.height/2; if(off<0 && off>closest.offset){ return {offset:off, element:child}; } else return closest; },{offset:-Infinity}).element; }
function newPosBetween(prev, next){ const A=Number.isFinite(prev)?+prev:0; const B=Number.isFinite(next)?+next:A+2; if(B-A>1e-6) return A+(B-A)/2; return A+0.000001; }
function reindex(list){ list.forEach((t,i)=> t.pos=i+1); }
function commitReorder(taskId, fromCol, toCol, insertIndex){ if(state.currentRole==='viewer') return; const cols=state.tabData[state.activeTab]; let moved; const fromList=cols[fromCol]||[]; const i=fromList.findIndex(t=>t.id===taskId); if(i!==-1){ moved=fromList.splice(i,1)[0]; } if(!moved) return; const target=cols[toCol]=cols[toCol]||[]; if(insertIndex==null||insertIndex<0) insertIndex=target.length; if(insertIndex>target.length) insertIndex=target.length; const prev=target[insertIndex-1]?.pos, next=target[insertIndex]?.pos; const pos=newPosBetween(prev,next); moved.pos=pos; target.splice(insertIndex,0,moved); reindex(target); renderBoard(); enqueueOp('move_task', { task_id: taskId, to: toCol, pos, tab: state.activeTab }); }
export function renderPresence(){ const avatars=document.getElementById('presenceAvatars'); const list=document.getElementById('presenceList'); const count=document.getElementById('presenceCount'); avatars.innerHTML=''; list.innerHTML=''; const others=[...state.presence.entries()].map(([id,v])=>({id,...v})).sort((a,b)=>(a.name||a.email).localeCompare(b.name||b.email)); count.textContent = others.length ? '' : '0 online'; const max=4; others.slice(0,max).forEach(p=>{ const span=document.createElement('span'); span.className='avatar inline-flex items-center justify-center h-7 w-7 rounded-full bg-indigo-600/10 text-indigo-700 dark:text-indigo-300 text-[11px] font-semibold ring-2 ring-white'; span.title=p.name||p.email; span.textContent=initials(p.name,p.email); const dot=document.createElement('span'); dot.className='presence-dot'; span.appendChild(dot); avatars.appendChild(span); const row=document.createElement('div'); row.className='flex items-center gap-2'; row.innerHTML=`<div class="relative inline-flex items-center justify-center h-6 w-6 rounded-full bg-indigo-600/10 text-indigo-700 dark:text-indigo-300 text-[10px] font-semibold">${initials(p.name,p.email)}<span class="presence-dot" style="right:-1px;bottom:-1px;width:8px;height:8px"></span></div><div class="truncate">${p.name||p.email}</div>`; list.appendChild(row); }); if(others.length>max){ const extra=others.length-max; const more=document.createElement('span'); more.className='avatar inline-flex items-center justify-center h-7 w-7 rounded-full bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 text-[11px] font-semibold ring-2 ring-white'; more.textContent = `+${extra}`; avatars.appendChild(more); } }
export function wireMembers(){ const modal=document.getElementById('membersModal'); const openBtn=document.getElementById('manageBtn'); const inviteBtn=document.getElementById('inviteBtn'); const closeables=modal.querySelectorAll('[data-close="members"]'); openBtn.addEventListener('click', async ()=>{ if(!state.WORKSPACE_ID){ alert('Open a workspace first.'); return; } modal.classList.remove('hidden'); await renderMembers(); }); closeables.forEach(el=> el.addEventListener('click', ()=> modal.classList.add('hidden'))); inviteBtn.addEventListener('click', async ()=>{ const input=document.getElementById('inviteEmail'); const email=(input.value||'').trim().toLowerCase(); if(!email) return; const r=await fetch(state.apiUrl('shares'), { method:'POST', headers:{ 'Authorization':`Bearer ${state.sessionJWT}`,'Content-Type':'application/json' }, body: JSON.stringify({ workspace_id: state.WORKSPACE_ID, email }) }); if(r.ok){ input.value=''; await renderMembers(); alert('Invitation created.'); } else { alert('Invite failed.'); } }); }
async function renderMembers(){ const list=document.getElementById('membersList'); list.innerHTML='<div class="py-6 text-sm text-gray-500">Loadingâ€¦</div>'; try{ const r=await fetch(state.apiUrl(`shares?workspace_id=${encodeURIComponent(state.WORKSPACE_ID)}`), { headers:{ 'Authorization':`Bearer ${state.sessionJWT}` }}); if(!r.ok){ list.innerHTML='<div class="py-6 text-sm text-red-600">Failed to load members</div>'; return; } const j=await r.json(); const shares=j.shares||[]; list.innerHTML=''; shares.forEach(s=>{ const row=document.createElement('div'); row.className='flex items-center justify-between py-3'; const who=document.createElement('div'); who.className='flex items-center gap-3'; const bubble=document.createElement('div'); bubble.className='h-8 w-8 rounded-full bg-indigo-600/15 text-indigo-700 dark:text-indigo-300 flex items-center justify-center text-xs font-semibold'; bubble.textContent=(s.email||'--').slice(0,2).toUpperCase(); const meta=document.createElement('div'); meta.innerHTML=`<div class="text-sm font-medium">${s.email||'â€”'}</div>`; who.appendChild(bubble); who.appendChild(meta); const actions=document.createElement('div'); actions.className='flex items-center gap-2'; if(s.role==='owner'){ const tag=document.createElement('span'); tag.className='text-xs text-gray-500'; tag.textContent='owner'; actions.appendChild(tag); } else { const sel=document.createElement('select'); sel.className='text-xs border border-gray-300 dark:border-gray-600 rounded px-2 py-1 bg-white dark:bg-gray-800'; ['editor','viewer'].forEach(r=>{ const o=document.createElement('option'); o.value=r; o.text=r; if(String(s.role||'editor')===r) o.selected=true; sel.appendChild(o); }); sel.onchange=async ()=>{ const r=await fetch(state.apiUrl(`shares/${s.id}`), { method:'PATCH', headers:{'Authorization':`Bearer ${state.sessionJWT}`,'Content-Type':'application/json'}, body: JSON.stringify({ role: sel.value }) }); if(!r.ok) alert('Failed to update role'); }; const del=document.createElement('button'); del.className='px-2 py-1 text-xs rounded bg-red-50 text-red-600 hover:bg-red-100'; del.textContent='Remove'; del.onclick=async ()=>{ if(!confirm('Remove this member?')) return; const r=await fetch(state.apiUrl(`shares/${s.id}`), { method:'DELETE', headers:{'Authorization':`Bearer ${state.sessionJWT}`}}); if(r.ok) renderMembers(); else alert('Failed to remove'); }; actions.appendChild(sel); actions.appendChild(del); } row.appendChild(who); row.appendChild(actions); list.appendChild(row); }); }catch{ list.innerHTML='<div class="py-6 text-sm text-red-600">Failed to load members</div>'; } }
export function wireChrome(){ document.getElementById('presenceBtn').onclick=()=> document.getElementById('presenceTooltip').classList.toggle('hidden'); document.getElementById('userButton').onclick=()=> document.getElementById('userMenu').classList.toggle('hidden'); document.querySelectorAll('[data-close="members"]').forEach(el=> el.onclick=()=> document.getElementById('membersModal').classList.add('hidden')); }
