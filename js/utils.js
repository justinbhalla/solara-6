// utils.js â€” helpers + event bus
import { state } from './state.js';
export const on = (name, fn)=>{ document.addEventListener(name, fn); return ()=> document.removeEventListener(name, fn); };
export const fire = (name, detail)=> document.dispatchEvent(new CustomEvent(name, { detail }));
export const debounce = (fn, ms=300)=>{ let t; return (...a)=>{ clearTimeout(t); t=setTimeout(()=>fn(...a), ms); }; };
export function stampSync(){ const el=document.getElementById('lastSynced'); if(el) el.textContent='Last synced: '+new Date().toLocaleTimeString(); }
export function getSessionJWT(){ const m=document.cookie.match(/(?:^|; )(?:stytch_session_jwt|solara_session_jwt)=([^;]+)/); return m?decodeURIComponent(m[1]):(localStorage.getItem('stytch_session_jwt')||localStorage.getItem('solara_session_jwt')||null); }
export function displayNameFor(u){ const f=u?.name?.first_name, l=u?.name?.last_name, e=u?.email_addresses?.[0]?.email_address; return [f,l].filter(Boolean).join(' ')||e||'User'; }
export function initials(name,email){ const parts=(name||'').trim().split(/\s+/).filter(Boolean); return parts.length?parts.slice(0,2).map(s=>s[0]).join('').toUpperCase():(email||'?').slice(0,2).toUpperCase(); }
export function normalizeDateString(v){ if(!v) return ''; if(/^\d{4}-\d{2}-\d{2}$/.test(v)) return v; const d=new Date(v); if(isNaN(d)) return ''; const tz=d.getTimezoneOffset()*60000; return new Date(d.getTime()-tz).toISOString().slice(0,10); }
export const colorForUser=(id)=>{ const palette=['#ef4444','#10b981','#3b82f6','#f59e0b','#8b5cf6','#06b6d4']; let h=0; for(let i=0;i<id.length;i++) h=(h*31+id.charCodeAt(i))|0; return palette[Math.abs(h)%palette.length]; };
export const myColor=()=> colorForUser(state.currentUserKey||'me'); export const myName =()=> displayNameFor(state.authedUser);
export async function verifySessionAndHydrate(){ state.sessionJWT=getSessionJWT(); if(state.sessionJWT){ try{ const r=await fetch(state.apiUrl('auth/check'), { headers:{ 'Authorization':`Bearer ${state.sessionJWT}` }}); if(r.ok){ const data=await r.json(); hydrateAuth(data); return true; } }catch{} } try{ const r2=await fetch(state.apiUrl('auth/check'), { credentials:'include' }); if(r2.ok){ const data=await r2.json(); hydrateAuth(data); return true; } }catch{} return false; }
function hydrateAuth(data){ state.currentUserKey=data.user_id; const email=data.email?[{email_address:data.email}]:[]; const parts=String(data.name||'').trim().split(/\s+/).filter(Boolean); state.authedUser={name:{first_name:parts[0]||'', last_name:parts.slice(1).join(' ')||''}, email_addresses:email}; if(data.session_jwt){ state.sessionJWT=data.session_jwt; localStorage.setItem('solara_session_jwt', state.sessionJWT); document.cookie=`solara_session_jwt=${encodeURIComponent(state.sessionJWT)}; path=/; SameSite=Lax`; } localStorage.setItem('stytch_user', JSON.stringify(state.authedUser)); const name=displayNameFor(state.authedUser); const emailStr=state.authedUser?.email_addresses?.[0]?.email_address||''; const avatar=document.getElementById('avatar'); const userName=document.getElementById('userName'); const userEmail=document.getElementById('userEmail'); if(avatar) avatar.textContent=initials(name,emailStr); if(userName) userName.textContent=name; if(userEmail) userEmail.textContent=emailStr; }
